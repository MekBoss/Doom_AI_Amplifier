

class pathfinding_thinker : thinker
{
//monster
private actor blind_kitten;
private actor pseudotarget;

private linetracer sight_check;

//level graph and pathfinding thinkers
private eventhandler nodes;

//store created route here
private array_wrapper path;

private bool shooting;

private uint AI_flags;

enum AI_flags_enum
{
    //Artificial Intellect Flags
    AIF_HAVE_TARGET = 1,//obvious, correct target i.e. pseudotarget.target
    AIF_IN_TARGET_SECTOR = 1 << 1,//self sector == target sector
    AIF_CANT_EXIT_SECTOR = 1 << 2,//cant exit from spawn sector (pillar/cage)
    AIF_SHOOTING = 1 << 3,//do pew pew pew
    AIF_HAVE_PATH = 1 << 4,//have path route
    AIF_FOLLOW_PATH = 1 << 5,//follow path route
    AIF_REACH_DESTINATION = 1 << 6,//obvious

};

//update path for every X seconds
private uint update_timer;

void init(actor a, eventhandler e)
{
    blind_kitten = a;
    nodes = e;
    sight_check = new("target_checker");
    update_timer = 0;
}

//is target is actual actor (not pseudotarget)
//and is kitten and its target in the same sector
private bool is_real_target()
{
    if(blind_kitten)
    {
        if(blind_kitten.target != null && blind_kitten.target != pseudotarget )
            if(blind_kitten.cursector != blind_kitten.target.cursector)
            {
                ai_flags &= ~AIF_IN_TARGET_SECTOR;
                return true;
            }

        else
        {
            ai_flags |= AIF_IN_TARGET_SECTOR;
            return false;
        }
    }
    return false;
}

//change kitten target
//since we ehre, also unset flag "same sector as target"
private void rearrange_target()
{
    if(blind_kitten && pseudotarget)
    {
        pseudotarget.target = blind_kitten.target;
        pseudotarget.master = blind_kitten;

        blind_kitten.target = pseudotarget;

        pseudotarget.setorigin(pseudotarget.master.pos, false);

        AI_flags &= ~AIF_IN_TARGET_SECTOR;
    }
}

//call "create path from A to B" function
private void get_path()
{
    if(blind_kitten && pseudotarget && pseudotarget.target)
    {
        node_base cur_node = path_algorithm(nodes).sector_to_node(blind_kitten.cursector);
        node_base targ_node = path_algorithm(nodes).sector_to_node(pseudotarget.target.cursector);
        
        if(cur_node && targ_node) 
        {
            if(cur_node == targ_node)
            //shouldnt happens, but for safe
            {
                if(path)
                    path.destroy();
                
                AI_flags |= AIF_IN_TARGET_SECTOR;
                return;
            }
            
            path = node_base(cur_node).dj_search(cur_node, targ_node, blind_kitten);
            array_wrapper(path).node_to_lines();
        }

        else
            console.printf("some node does not exist");

    }
}

//check is line is blocking
private bool is_line_blocking(line l, actor a)
{
    if(l)
    {
        if( (l.flags & l.ML_BLOCKING)
        || (l.flags &  line.ML_BLOCKMONSTERS)
        || (l.flags & line.ML_BLOCKEVERYTHING)
        || !(l.flags & line.ML_TWOSIDED) )
            return true;

        if(a)
        {
            sector another = null;
            
            if(l.frontsector == blind_kitten.cursector)
                another = l.backsector;
            else 
                another = l.frontsector;

            if(abs(a.cursector.CenterFloor() - another.CenterFloor() ) > a.MaxDropOffHeight)
                //cant jump down
                return true;
                
            if(abs(a.cursector.CenterFloor() - another.CenterFloor() ) > a.MaxStepHeight)
                //cant jump down
                return true;
        }
    }
    return false;
}


//if monster bump into line
//rotate it in "correct" direction (closer to destination node while staying in the same sector)
private void rotate_kitten(line l)
{
    if(l)
    {
        vector2 a, b, midline, direction, offset;

        midline = (l.v1.p + l.v2.p) / 2;

        direction = l.v1.p - midline;
        offset = direction;
        //get almost unit vector but in much more cheaper way
        if(abs(offset.x) > abs(offset.y) || abs(offset.x) == abs(offset.y) )
            offset /= abs(offset.x);
        else
            offset /= abs(offset.y);

        a = midline + (direction + offset);
        b = midline - (direction + offset);

        vector2 aa = level.vec2diff(a, blind_kitten.target.pos.xy);
        vector2 bb = level.vec2diff(b, blind_kitten.target.pos.xy);

        double a_dis = aa dot aa;
        double b_dis = bb dot bb;

        if(a_dis == b_dis)
        {
            //repeat calculation slightly changing vectors
            aa = level.vec2diff(a, blind_kitten.target.pos.xy + (1, 1) );
            bb = level.vec2diff(b, blind_kitten.target.pos.xy + (1, 1) );

            a_dis = aa dot aa;
            b_dis = bb dot bb;
        }

        if( a_dis < b_dis && level.PointInSector(a) != null)
        {
            //actor.spawn("healthbonus", pos: (a, 0));
            a = level.vec2diff(a, blind_kitten.pos.xy);
            
            if(a.x == 0)
            {
                if( a.y > 0 )
                    blind_kitten.angle = 90;
                else
                    blind_kitten.angle = -90;
            }
            else
                blind_kitten.angle = atan(a.y / a.x);
        }

        else if( b_dis < a_dis && level.PointInSector(b) != null)
        {
            //actor.spawn("healthbonus", pos: (b, 0));
            b = level.vec2diff(b, blind_kitten.pos.xy);

            if(b.x == 0)
            {
                if( b.y > 0 )
                    blind_kitten.angle = -90;
                else
                    blind_kitten.angle = 90;
            }
            else
                blind_kitten.angle = atan( b.y / b.x);
        }
        blind_kitten.movecount = 1;
    }
}

private double distance_to_line(line l, vector2 p = (double.infinity, double.infinity) )
{
    if(p == p && l)
    {
        double un = (l.v2.p.y - l.v1.p.y) * p.x - (l.v2.p.x - l.v1.p.x) * p.y + (l.v2.p.x * l.v1.p.y) - (l.v2.p.y * l.v1.p.x);
        //actually here I must find square root of 'ln', but I trick system and just square 'un'
        double ln = (l.v2.p.y - l.v1.p.y) * (l.v2.p.y - l.v1.p.y) + (l.v2.p.x - l.v1.p.x) * (l.v2.p.x - l.v1.p.x);
        un *= un;

        return un / ln;
    }

    return double.infinity;
}

//check is actor hit/near some line
private void check_line_crashing(actor it)
{
    if(!it)
        it = blind_kitten;

    array<line> touching_lines;
    touching_lines.clear();

    for(uint i = 0; i < it.cursector.lines.size(); i++)
    {
        let l = it.cursector.lines[i];

        if(is_inside_line_bbox(it, l) != null)
        {
            touching_lines.push(l);
        }
    }

    double line_dist = double.infinity;
    int line_id = -1;

    if(touching_lines.size() > 0)
    {

        for(uint i = 0; i < touching_lines.size(); i++)
        {
            if(is_line_blocking(touching_lines[i], it) == true)
            {
                //find closest line to actor position
                double d = distance_to_line(touching_lines[i], it.pos.xy);

                if(d < line_dist)
                {
                    rotate_kitten(touching_lines[i]);
                    line_dist = d;
                    line_id = i;
                }
            }
        }
    }
    /*
    //if there are line which block and close to monster
    if(line_id > -1)
    {
        //then rotate monster to vertex which closer to destination node
        rotate_kitten(touching_lines[line_id]);
    }
    */
}

//check line bbox and return true if actor, near/in it
private line is_inside_line_bbox(actor t, line l)
{
    //for some weird reason bbox[0] and [1] are 'y' coordinates, instead of 'x'

    double x_max, y_max, x_min, y_min;

    x_max = max(l.bbox[2], l.bbox[3]);
    y_max = max(l.bbox[0], l.bbox[1]);
    x_min = min(l.bbox[2], l.bbox[3]);
    y_min = min(l.bbox[0], l.bbox[1]);

    //is inside line bounding rectangle
    //radius and - 1 to extend bbox of vertical/horizontal lines
    //which have zero width/height of bbox
    if(t.pos.y > y_min - t.radius - 1 && t.pos.y < y_max - t.radius - 1 )
    {
        if(t.pos.x > x_min - t.radius - 1 && t.pos.x < x_max - t.radius - 1 )
        {
            //yes
            return l;
        }
    }

    //same, but now with +
    if(t.pos.y > y_min + t.radius + 1 && t.pos.y < y_max + t.radius + 1 )
    {
        if(t.pos.x > x_min + t.radius + 1 && t.pos.x < x_max + t.radius + 1 )
        {
            //yes
            return l;
        }
    }
    return null;
}

//what function name says
private bool is_actual_target_in_fov()
{
    if(blind_kitten && pseudotarget && pseudotarget.target)
    {
        vector3 hit_dir;
        if(pseudotarget && pseudotarget.target)
            hit_dir = level.vec3diff(blind_kitten.pos, pseudotarget.target.pos);
        
        else
            hit_dir = level.vec3diff(blind_kitten.pos, blind_kitten.target.pos);

        if(pseudotarget && pseudotarget.target)
            target_checker(sight_check).actual_target = pseudotarget.target;
        else
            target_checker(sight_check).actual_target = blind_kitten.target;
        
        
        sight_check.trace(blind_kitten.pos + (0, 0, blind_kitten.height / 2), blind_kitten.cursector, hit_dir, 8192, TRACE_HitSky);

        //yes, proceed to shooting
        if(target_checker(sight_check).success == true)
            return true;

        //go back to default monsters buisenes, like dancing on spawn spot
        else
            return false;
    }

    else
        return false;
}

private void switch_target_back()
{
    blind_kitten.target = pseudotarget.target;
    pseudotarget.target = null;
}

/*
|= for turn on
&= ~"flag name" for turn off
&= for comparing

*/

override void tick()
{
    if(!ai_pathfinding_cvar)
        return;

    if(!pseudotarget)
    {
        pseudotarget = actor.spawn("blind_kitten_target", (double.infinity, double.infinity, double.infinity) );
    }

    //if alive, in some sense, and have target
    if(blind_kitten && (blind_kitten.health > 0 || blind_kitten.bkilled == false || blind_kitten.bICECORPSE == false) && blind_kitten.target)
    {
        //if not shooting
        if( (AI_flags &= AIF_SHOOTING) == false )
        {
            //if target type is suitable for changing (not pseudotarget)
            if(is_real_target() == true)
            {
                if(blind_kitten.target.cursector != blind_kitten.cursector)
                    //replace pointers of kitten and pseudotarget
                    //reset "in same sector" flag in function
                    rearrange_target();

                else
                {
                    AI_flags |= AIF_REACH_DESTINATION;
                    AI_flags |= AIF_IN_TARGET_SECTOR;
                }
            }
            
            //check_line_crashing(blind_kitten);

            //if not in the same sector as target init target chasing
            if( (AI_flags &= AIF_IN_TARGET_SECTOR) == false)
            {
                AI_flags |= AIF_FOLLOW_PATH;

                //kitten target already changed to mod related target
                //so if there are no path to it
                if( path == null)
                    get_path();

                //or 5 second pass and target, probably, change it sector
                if( update_timer > 175)
                {
                    get_path();
                    update_timer = 0;
                }

                //follow path here
                if( path )
                {
                    if( array_wrapper(path).path_lines.size() > 1 )
                    {
                        uint last_line = array_wrapper(path).path_lines.size() - 1;
                        uint last_sector = array_wrapper(path).path.size() - 1;

                        if(blind_kitten.cursector == pseudotarget.cursector)
                        {
                            vector3 o = (
                            array_wrapper(path).path_lines[last_line].v1.p.x + array_wrapper(path).path_lines[last_line].v2.p.x,
                            array_wrapper(path).path_lines[last_line].v1.p.y + array_wrapper(path).path_lines[last_line].v2.p.y,
                            0) / 2;
                            
                            pseudotarget.setorigin( o, false );
                        }

                        //destroy last node in array if it location equal to kitten
                        //and there are still some nodes to follow
                        if(blind_kitten.cursector == array_wrapper(path).path[last_sector].get_sector() )
                        {
                            array_wrapper(path).path_lines.pop();
                            array_wrapper(path).path.pop();
                        }
                    }
                    
                    //if last node...
                    else if (array_wrapper(path).path_lines.size() == 1)
                    {
                        //...set pseudotarget in position...
                        pseudotarget.setorigin( node_base(array_wrapper(path).path[0]).get_center(), false );
                        //...clear all stuff...
                        AI_flags &= ~AIF_FOLLOW_PATH;
                        path.destroy();
                        //...and set "reach destination" flag
                        AI_flags |= AIF_REACH_DESTINATION;
                    }

                    //no points to follow
                    else
                    {
                        AI_flags &= ~AIF_FOLLOW_PATH;
                        //even if there are no path at all
                        AI_flags |= AIF_REACH_DESTINATION;
                        path.destroy();
                    }
                }

                if(!path)
                {
                    AI_flags &= ~AIF_FOLLOW_PATH;
                    AI_flags |= AIF_REACH_DESTINATION;
                    blind_kitten.target = pseudotarget.target;
                }
            }
        }

        //kitten want shoot someone, do some technical checks here to allow/prevent it
        if(AI_flags &= AIF_SHOOTING || blind_kitten.instatesequence(blind_kitten.curstate, blind_kitten.findstate("missile") ) || blind_kitten.instatesequence(blind_kitten.curstate, blind_kitten.findstate("melee") ) )
        {
            //init shooting sequence
            if(shooting == false)
            {
                //check is there are line of sight with actual kitten target
                //yes, proceed to shooting
                if(is_actual_target_in_fov() == true)
                {
                    blind_kitten.target = pseudotarget.target;
                    blind_kitten.a_facetarget();
                    //AI_flags |= AIF_SHOOTING;
                }
                //otherwise, target behind wall, go back to folowing path
                //by preventing any attack chance
                else
                {
                    blind_kitten.bJUSTATTACKED = true;
                    blind_kitten.reactiontime = 16;
                    blind_kitten.setstate(blind_kitten.findstate("see"));
                }
            }
/*
            this make kitten too strong

            //already shooting
            //if next state is see state, i.e. it already stop shooting
            if (blind_kitten.instatesequence(blind_kitten.curstate.nextstate, blind_kitten.findstate("see") ) )
            {
                //if target alive and cvar say continue shoot
                if(blind_kitten.target.bkilled == false && monster_constant_shooting == true)
                {
                    //if target in fov of course
                    if(is_actual_target_in_fov() == false)
                    {
                        blind_kitten.target = pseudotarget;
                        AI_flags &= ~AIF_SHOOTING;
                    }

                    else
                        blind_kitten.setstatelabel("missile");
                }
            }
*/            
        }
    }

    //increase timer
    update_timer ++;

    //obvious
    if(!blind_kitten)
    {
        pseudotarget.destroy();
        self.destroy();
        if(sight_check)
            sight_check.destroy();
        if(path)
            path.destroy();
    }
}

}





class blind_kitten_target : actor
{

default
{
    +noclip
    +nointeraction
    +nosector
    +shootable
    height 10;
    radius 10;
}

states
{
    spawn:
        tnt1 a -1;
    stop;
}

}


class target_checker : LineTracer
{
Actor actual_target;
bool success;

override ETraceStatus TraceCallback()
{
    if (Results.HitType == TRACE_HitWall)
    {
        if (Results.Tier == TIER_Middle)
        {
            if (Results.HitLine.Flags & Line.ML_TWOSIDED)
            {
                return TRACE_Skip;
            }
            return TRACE_Stop; 
        }
    }

    if (Results.HitType == TRACE_HitActor)
    {
        success = false;
        if (Results.HitActor == actual_target)
        {
            success = true;
            return TRACE_Stop;
        }
        return TRACE_skip;
    }
    return TRACE_Stop;
}

}

