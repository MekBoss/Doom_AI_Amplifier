enum algo_type
{
    AP_DJ = 1,
    AD_ALL_STAR = 2
};

extend class node_base
{
    //cost of a path from the point of origin
    protected double path_cost;

    //return path and bool is it completed
    //i.e. is pathactually passable by actor

    array_wrapper, bool dj_search(node_base start, node_base finish, actor walker = null, algo_type algo_type = AD_ALL_STAR)
    {
        //if walker is null it mean "runing script in debug mode"

        //create array wrapper for future
        array_wrapper path_map = array_wrapper(new("array_wrapper") );

        //array for completed nodes in first phase
        array<node_base> completed_nodes; completed_nodes.clear();

        //array for actual path
        array<node_base> actual_path; actual_path.clear();

        //we need to begin from something
        node_base waypoint_old = start;
        completed_nodes.push(start);

        node_base(start).path_cost = 0;

        uint fuse = 0;


        if(start && finish)
        {
            //obvious
            if(start == finish)
                return (array_wrapper)(path_map), false;
            
            //save some (MUCH) time using pre calculated connectivity map
            //here check is two node connected to each other at all
            //without it script firstly iterate through ALL avaliable sectos before saying "NO WAY"
            if( node_base(start).check_connectivity_to(finish) == false )
                return (array_wrapper)(path_map), false;

            //switch to exit from loop
            bool reach = false;

            //for cases when there are no path
            bool movement_blocked = false;


            //fill values until not connect start with finish
            while(reach == false)
            {
                fuse++;
                if(path_dj_debug)
                {
                    console.printf("");
                    console.printf("size of completed_nodes %i", completed_nodes.size() );
                }

                //find node with smalles path_cost from the start to this node
                if( completed_nodes.size() > 0 )
                {
                    //because double.inf greater than any real number
                    double node_distance = double.infinity;

                    for(uint i = 0; i < completed_nodes.size(); i++ )
                    {
                        if(node_base(completed_nodes[i]).get_processed() == false)
                        {
                            switch(algo_type)
                            {
                                case AD_ALL_STAR:
                                    //literally the only thing I here add/change...
                                    vector3 vector_to_finish = level.vec3diff(node_base(completed_nodes[i]).get_center(), node_base(finish).get_center());

                                    double distance_to_finish = vector_to_finish dot vector_to_finish;

                                    if(distance_to_finish < node_distance)
                                    {
                                        node_distance = distance_to_finish;
                                        waypoint_old = node_base(completed_nodes[i]);
                                    }
                                break;

                                case AP_DJ:
                                    if(node_base(completed_nodes[i]).path_cost < node_distance)
                                    {
                                        node_distance = node_base(completed_nodes[i]).path_cost;
                                        waypoint_old = node_base(completed_nodes[i]);
                                    }
                                break;
                            }
                        }
                    }
                }

                if(waypoint_old)
                {
                    //to shortene amount of text
                    let waypoint = node_base(waypoint_old);
        
                    waypoint_old = null;

                    //so it dont pick same node all over again
                    waypoint.processed = true;
                    
                    if(path_dj_debug)
                        console.printf("waypoint exist, distance %f", waypoint.path_cost);

                    let crossroads = array_wrapper(waypoint.get_all_neighborgs() );

                    if(path_dj_debug)
                        console.printf("crossroads size %i", crossroads.path.size() );
                    
                    for(uint i = 0; i < crossroads.path.size(); i++)
                    {
                        let waypoint_new = node_base(crossroads.path[i]);

                        waypoint_old = null;

                        //check if we able to go to this sector through line between them
                        //if dont, ignore it for now, probably there are another way
                        if( is_line_blocks( waypoint.line_between_sectors(waypoint_new), walker) == false) 
                        {
                            if(path_dj_debug)
                                console.printf("sector %i unreachable from sector %i, blocked by line", waypoint_new.get_id(), waypoint.get_id() );
                            continue;
                        }

                        //line let us pass, but is sector suitable for actor
                        if( waypoint.is_sector_passable(waypoint_new, walker) == false )
                        {
                            if(path_dj_debug)
                                console.printf("cant enter in sector %i from sector %i, problems with floor/ceiling height", waypoint_new.get_id(), waypoint.get_id()  );
                            
                            //mark it as processed, since there are no use for it for now
                            waypoint_new.processed = true;
                            continue;
                        }

                        //calculate path length from start to current node
                        double d = waypoint.path_cost + waypoint.points_distance(waypoint.get_center(), waypoint_new.get_center() );
                        
                        if(path_dj_debug)
                            console.printf("distance between nodes %f", d);


                        //...of course if it smaller than distance that already stored in node
                        if( waypoint_new.path_cost > d)
                        {
                            if(path_dj_debug)
                                console.printf("push that node in completed array");
            
                            waypoint_new.path_cost = d;
                            waypoint_new.root_node = waypoint;

                            completed_nodes.push(crossroads.path[i]);
                            //politely exit if reach destination
                            //politely because zscript dont have "goto exit_loop" option
                            if(crossroads.path[i] == finish)
                                reach = true;
                        }
                    }
                }

                //something block movement, exit now
                else
                {
                    reach = true;
                    movement_blocked = true;
                }

                if(fuse >= path_algorithm(all_graph_list).graph_size() )
                {
                    reach = true;
                    console.printf("too much iterations, first time");
                }
            }


            //we finally connect start and finish, like nokia in advertising from 90
            //time to build actual path from the ending to the finish

            //again, we need to begin from something
            //check here, maybe there are no path
            if(movement_blocked == false)
                actual_path.push(finish);

            //and if so find closest sector to finsish
            if(movement_blocked == true)
            {
                double d = double.infinity;
                node_base nf = null;
                for(uint i = 0; i < completed_nodes.size(); i++)
                {
                    double dist = node_base(completed_nodes[i]).points_distance(node_base(completed_nodes[i]).get_center(), node_base(finish).get_center() );
                    
                    if( dist < d )
                    {
                        nf = completed_nodes[i];
                        d = dist;
                    }
                }

                if(nf != null)
                    actual_path.push(nf);

                else
                    console.printf("there are no closest node");
            }

            reach = false;

            //safety catch, if something fuckup
            //or someone fucks thing using cheat engine
            uint safe = 0;


            while(reach == false)
            {
                safe++;
                //each iteration put last actual path node to the end of the array, so
                node_base origin = actual_path[actual_path.size() - 1];
                
                if(origin == start)
                {
                    reach = true;
                }

                //each root_node MUST point to last node which lastly set it path_cost variable
                ////after some tesing turns out this can lead to unoptimized path in some cases
                if( node_base(origin).root_node )
                {
                    actual_path.push( node_base(origin).root_node );
                }
                //if root_node equal to null, it start, push it there too
                else
                {
                    actual_path.push( start );
                    reach = true;
                }

                if(safe > completed_nodes.size() )
                {
                    console.printf("too much iterations, second time");
                    reach = true;
                }
            }

            path_map.path.copy(actual_path);

            //cleaun up time, reset all nodes which we checked
            //so that another iteration for another monstah wont create faulty path
            for(uint i = 0; i < completed_nodes.size(); i ++)
            {
                node_base(completed_nodes[i]).path_cost = double.infinity;
                node_base(completed_nodes[i]).root_node = null;
            }

        }

        //okay, we finally make our way out...or dont
        //return array of path nodes

        return (array_wrapper)(path_map), true;
    }

}